package com.example.demo.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.authorizeRequests(requests -> requests
		        .antMatchers("/treninzi/**").permitAll()
		        .antMatchers("/profil/**").permitAll()
		        .antMatchers("/vezbe/dodajVezbu").permitAll()
		        .antMatchers("/vezbe/dodajOmiljenu").permitAll()
		        .antMatchers("/vezbe/oceniVezbu").permitAll()
		        .antMatchers("/vezbe/sveVezbe").permitAll() // Allow access to this path without authentication
		        .anyRequest().authenticated()
		    )
		    .formLogin(login -> login
		        .loginPage("/login.jsp")
		        .defaultSuccessUrl("/vezbe/sveVezbe")
		        .permitAll()
		    )
		    .logout(logout -> logout
		        .logoutUrl("/logout")
		        .logoutSuccessUrl("/vezbe/sveVezbe")
		        .permitAll()
		    )
		    .csrf().disable();

	}

	@Bean
	AuthenticationManager authenticationManager(UserDetailsService userDetailsService,
			PasswordEncoder passwordEncoder) {
		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setUserDetailsService(userDetailsService);
		authenticationProvider.setPasswordEncoder(passwordEncoder);

		return new ProviderManager(authenticationProvider);
	}

	@Bean
	PasswordEncoder getPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
}